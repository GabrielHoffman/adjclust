// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// HeapHop2
Rcpp::NumericVector HeapHop2(Rcpp::NumericVector Input, const int p, const int h, const int NbCLasses);
RcppExport SEXP _adjclust_HeapHop2(SEXP InputSEXP, SEXP pSEXP, SEXP hSEXP, SEXP NbCLassesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Input(InputSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const int >::type h(hSEXP);
    Rcpp::traits::input_parameter< const int >::type NbCLasses(NbCLassesSEXP);
    rcpp_result_gen = Rcpp::wrap(HeapHop2(Input, p, h, NbCLasses));
    return rcpp_result_gen;
END_RCPP
}
// HeapHop
Rcpp::NumericVector HeapHop(Rcpp::NumericVector Input, const int p, const int h, const int NbCLasses);
RcppExport SEXP _adjclust_HeapHop(SEXP InputSEXP, SEXP pSEXP, SEXP hSEXP, SEXP NbCLassesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Input(InputSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const int >::type h(hSEXP);
    Rcpp::traits::input_parameter< const int >::type NbCLasses(NbCLassesSEXP);
    rcpp_result_gen = Rcpp::wrap(HeapHop(Input, p, h, NbCLasses));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP CCondnCheck(SEXP);
RcppExport SEXP CFindLambda(SEXP, SEXP, SEXP);
RcppExport SEXP CMakeDiagOne(SEXP);
RcppExport SEXP CMakeSparseDiagOne(SEXP, SEXP, SEXP);
RcppExport SEXP CmatL(SEXP, SEXP, SEXP);
RcppExport SEXP CRmatR(SEXP, SEXP, SEXP);
RcppExport SEXP CSparseBand(SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP CSparseCondnCheck(SEXP, SEXP, SEXP);
RcppExport SEXP CSparseMatL(SEXP, SEXP, SEXP);
RcppExport SEXP CSparseRmatR(SEXP, SEXP, SEXP);
RcppExport SEXP cWardHeaps(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP DiagBand(SEXP, SEXP);
RcppExport SEXP OneDiagBand(SEXP, SEXP);
RcppExport SEXP percDown(SEXP, SEXP, SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_adjclust_HeapHop2", (DL_FUNC) &_adjclust_HeapHop2, 4},
    {"_adjclust_HeapHop", (DL_FUNC) &_adjclust_HeapHop, 4},
    {"CCondnCheck",        (DL_FUNC) &CCondnCheck,         1},
    {"CFindLambda",        (DL_FUNC) &CFindLambda,         3},
    {"CMakeDiagOne",       (DL_FUNC) &CMakeDiagOne,        1},
    {"CMakeSparseDiagOne", (DL_FUNC) &CMakeSparseDiagOne,  3},
    {"CmatL",              (DL_FUNC) &CmatL,               3},
    {"CRmatR",             (DL_FUNC) &CRmatR,              3},
    {"CSparseBand",        (DL_FUNC) &CSparseBand,         5},
    {"CSparseCondnCheck",  (DL_FUNC) &CSparseCondnCheck,   3},
    {"CSparseMatL",        (DL_FUNC) &CSparseMatL,         3},
    {"CSparseRmatR",       (DL_FUNC) &CSparseRmatR,        3},
    {"cWardHeaps",         (DL_FUNC) &cWardHeaps,         12},
    {"DiagBand",           (DL_FUNC) &DiagBand,            2},
    {"OneDiagBand",        (DL_FUNC) &OneDiagBand,         2},
    {"percDown",           (DL_FUNC) &percDown,            4},
    {NULL, NULL, 0}
};

RcppExport void R_init_adjclust(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
